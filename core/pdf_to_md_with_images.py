"""
PDF to Markdown with Images Converter
====================================

Module khusus untuk konversi PDF ke Markdown dengan ekstraksi gambar
"""

import os
import tempfile
from pathlib import Path
from typing import Optional, Tuple, List
import subprocess

# Import libraries dengan fallback
try:
    import fitz  # PyMuPDF
    PYMUPDF_AVAILABLE = True
except ImportError:
    PYMUPDF_AVAILABLE = False

try:
    from pdf2image import convert_from_path
    from PIL import Image
    PDF2IMAGE_AVAILABLE = True
except ImportError:
    PDF2IMAGE_AVAILABLE = False

try:
    from rich.console import Console
    console = Console()
except ImportError:
    class Console:
        def print(self, *args, **kwargs):
            print(*args)
    console = Console()

class PDFToMarkdownWithImages:
    """
    Converter untuk PDF ke Markdown dengan gambar
    """
    
    def __init__(self, output_dir: Path, temp_dir: Path):
        self.output_dir = Path(output_dir)
        self.temp_dir = Path(temp_dir)
        self.available_methods = self._check_available_methods()
    
    def _check_available_methods(self) -> List[str]:
        """Check which methods are available"""
        methods = []
        
        if PYMUPDF_AVAILABLE:
            methods.append("pymupdf_text_and_images")
        if PDF2IMAGE_AVAILABLE:
            methods.append("pdf2image_full_pages")
        
        return methods
    
    def extract_with_pymupdf(self, pdf_path: Path, output_md_path: Path) -> Tuple[bool, str]:
        """
        Extract text dan gambar menggunakan PyMuPDF
        """
        try:
            doc = fitz.open(str(pdf_path))
            
            # Buat folder untuk gambar
            images_dir = output_md_path.parent / f"{output_md_path.stem}_images"
            images_dir.mkdir(exist_ok=True)
            
            markdown_content = f"# {pdf_path.stem}\n\n"
            markdown_content += "*Generated by PDF Converter Tool with Images*\n\n"
            markdown_content += "---\n\n"
            
            image_count = 0
            
            for page_num in range(len(doc)):
                page = doc.load_page(page_num)
                
                # Add page header
                markdown_content += f"## Page {page_num + 1}\n\n"
                
                # Extract text
                page_text = page.get_text()
                if page_text.strip():
                    markdown_content += page_text + "\n\n"
                
                # Extract images from page
                image_list = page.get_images(full=True)
                
                for img_index, img in enumerate(image_list):
                    try:
                        # Get image data
                        xref = img[0]
                        pix = fitz.Pixmap(doc, xref)
                        
                        if pix.n - pix.alpha < 4:  # GRAY or RGB
                            img_filename = f"page_{page_num + 1}_img_{img_index + 1}.png"
                            img_path = images_dir / img_filename
                            
                            pix.save(str(img_path))
                            
                            # Add image reference to markdown
                            relative_img_path = f"{images_dir.name}/{img_filename}"
                            markdown_content += f"![Image {image_count + 1}]({relative_img_path})\n\n"
                            
                            image_count += 1
                        
                        pix = None
                        
                    except Exception as e:
                        console.print(f"[yellow]Warning: Could not extract image {img_index + 1} from page {page_num + 1}: {e}[/yellow]")
                
                markdown_content += "---\n\n"
            
            doc.close()
            
            # Save markdown file
            with open(output_md_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            return True, f"Extracted {image_count} images and text using PyMuPDF"
            
        except Exception as e:
            return False, f"PyMuPDF extraction failed: {str(e)}"
    
    def extract_with_pdf2image(self, pdf_path: Path, output_md_path: Path) -> Tuple[bool, str]:
        """
        Konversi setiap halaman PDF menjadi gambar
        """
        if not PDF2IMAGE_AVAILABLE:
            return False, "pdf2image not available"
        
        try:
            console.print("[blue]Converting PDF pages to images...[/blue]")
            
            # Convert PDF to images
            images = convert_from_path(
                str(pdf_path), 
                dpi=200,  # Good quality but not too large
                fmt='PNG'
            )
            
            # Buat folder untuk gambar
            images_dir = output_md_path.parent / f"{output_md_path.stem}_images"
            images_dir.mkdir(exist_ok=True)
            
            markdown_content = f"# {pdf_path.stem}\n\n"
            markdown_content += "*Generated by PDF Converter Tool - Full Page Images*\n\n"
            markdown_content += f"**Total Pages:** {len(images)}\n\n"
            markdown_content += "---\n\n"
            
            for page_num, image in enumerate(images):
                # Save page as image
                img_filename = f"page_{page_num + 1}.png"
                img_path = images_dir / img_filename
                
                # Optimize image size
                image.save(str(img_path), "PNG", optimize=True)
                
                # Add to markdown
                relative_img_path = f"{images_dir.name}/{img_filename}"
                markdown_content += f"## Page {page_num + 1}\n\n"
                markdown_content += f"![Page {page_num + 1}]({relative_img_path})\n\n"
                markdown_content += "---\n\n"
                
                console.print(f"[green]Converted page {page_num + 1}/{len(images)}[/green]")
            
            # Save markdown file
            with open(output_md_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            return True, f"Converted {len(images)} pages to images"
            
        except Exception as e:
            return False, f"pdf2image conversion failed: {str(e)}"
    
    def extract_hybrid_method(self, pdf_path: Path, output_md_path: Path) -> Tuple[bool, str]:
        """
        Hybrid method: PyMuPDF untuk teks + pdf2image untuk halaman yang tidak ada teks
        """
        try:
            doc = fitz.open(str(pdf_path))
            
            # Buat folder untuk gambar
            images_dir = output_md_path.parent / f"{output_md_path.stem}_images"
            images_dir.mkdir(exist_ok=True)
            
            markdown_content = f"# {pdf_path.stem}\n\n"
            markdown_content += "*Generated by PDF Converter Tool - Hybrid Method*\n\n"
            markdown_content += "---\n\n"
            
            total_images = 0
            pages_with_little_text = []
            
            # First pass: identify pages with little text
            for page_num in range(len(doc)):
                page = doc.load_page(page_num)
                page_text = page.get_text().strip()
                
                if len(page_text) < 100:  # Less than 100 characters
                    pages_with_little_text.append(page_num)
            
            doc.close()
            
            # Convert text-poor pages to images
            if pages_with_little_text and PDF2IMAGE_AVAILABLE:
                console.print(f"[blue]Converting {len(pages_with_little_text)} pages with little text to images...[/blue]")
                
                try:
                    # Convert specific pages to images
                    page_images = convert_from_path(
                        str(pdf_path),
                        dpi=200,
                        first_page=min(pages_with_little_text) + 1,
                        last_page=max(pages_with_little_text) + 1
                    )
                    
                    page_image_dict = {}
                    img_index = 0
                    for page_num in range(min(pages_with_little_text), max(pages_with_little_text) + 1):
                        if page_num in pages_with_little_text:
                            page_image_dict[page_num] = page_images[img_index]
                            img_index += 1
                
                except Exception as e:
                    console.print(f"[yellow]Warning: Could not convert pages to images: {e}[/yellow]")
                    page_image_dict = {}
            else:
                page_image_dict = {}
            
            # Second pass: generate markdown
            doc = fitz.open(str(pdf_path))
            
            for page_num in range(len(doc)):
                page = doc.load_page(page_num)
                markdown_content += f"## Page {page_num + 1}\n\n"
                
                if page_num in pages_with_little_text and page_num in page_image_dict:
                    # Save page as image
                    img_filename = f"page_{page_num + 1}.png"
                    img_path = images_dir / img_filename
                    page_image_dict[page_num].save(str(img_path), "PNG", optimize=True)
                    
                    # Add image to markdown
                    relative_img_path = f"{images_dir.name}/{img_filename}"
                    markdown_content += f"![Page {page_num + 1}]({relative_img_path})\n\n"
                    total_images += 1
                else:
                    # Extract text
                    page_text = page.get_text()
                    if page_text.strip():
                        markdown_content += page_text + "\n\n"
                    
                    # Extract embedded images
                    image_list = page.get_images(full=True)
                    for img_index, img in enumerate(image_list):
                        try:
                            xref = img[0]
                            pix = fitz.Pixmap(doc, xref)
                            
                            if pix.n - pix.alpha < 4:
                                img_filename = f"page_{page_num + 1}_img_{img_index + 1}.png"
                                img_path = images_dir / img_filename
                                pix.save(str(img_path))
                                
                                relative_img_path = f"{images_dir.name}/{img_filename}"
                                markdown_content += f"![Image from Page {page_num + 1}]({relative_img_path})\n\n"
                                total_images += 1
                            
                            pix = None
                        except:
                            pass
                
                markdown_content += "---\n\n"
            
            doc.close()
            
            # Save markdown file
            with open(output_md_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            return True, f"Hybrid extraction: {total_images} images, text from {len(doc) - len(pages_with_little_text)} pages"
            
        except Exception as e:
            return False, f"Hybrid extraction failed: {str(e)}"
    
    def convert_pdf_to_markdown_with_images(self, pdf_path: Path, method: str = "auto") -> Tuple[bool, str, Path]:
        """
        Convert PDF to Markdown dengan gambar
        
        Args:
            pdf_path: Path ke PDF file
            method: "auto", "pymupdf", "pdf2image", "hybrid"
            
        Returns:
            (success, message, output_path)
        """
        
        # Tentukan output path
        output_md_path = self.output_dir / f"{pdf_path.stem}.md"
        
        if method == "auto":
            # Try hybrid method first, then others
            if "pymupdf_text_and_images" in self.available_methods and "pdf2image_full_pages" in self.available_methods:
                success, msg = self.extract_hybrid_method(pdf_path, output_md_path)
                if success:
                    return True, msg, output_md_path
            
            # Try PyMuPDF
            if "pymupdf_text_and_images" in self.available_methods:
                success, msg = self.extract_with_pymupdf(pdf_path, output_md_path)
                if success:
                    return True, msg, output_md_path
            
            # Try pdf2image
            if "pdf2image_full_pages" in self.available_methods:
                success, msg = self.extract_with_pdf2image(pdf_path, output_md_path)
                if success:
                    return True, msg, output_md_path
            
            return False, "No extraction methods available", output_md_path
        
        elif method == "pymupdf":
            success, msg = self.extract_with_pymupdf(pdf_path, output_md_path)
            return success, msg, output_md_path
        
        elif method == "pdf2image":
            success, msg = self.extract_with_pdf2image(pdf_path, output_md_path)
            return success, msg, output_md_path
        
        elif method == "hybrid":
            success, msg = self.extract_hybrid_method(pdf_path, output_md_path)
            return success, msg, output_md_path
        
        else:
            return False, f"Unknown method: {method}", output_md_path
